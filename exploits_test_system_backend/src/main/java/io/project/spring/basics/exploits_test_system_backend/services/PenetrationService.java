package io.project.spring.basics.exploits_test_system_backend.services;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

@Service
public class PenetrationService {
    @Autowired
    private DataService dataService;
    @Autowired
    private OpenAiService openAiService;

    public String penetrate(String payloads){
        String result = "";
//
//        String payloads = "Content: ```json\n" +
//                "[\n" +
//                "    {\"input\": \"../../etc/passwd\"},\n" +
//                "    {\"input\": \"../../var/log/syslog\"},\n" +
//                "    {\"input\": \"../../../etc/hosts\"},\n" +
//                "    {\"input\": \"../../../../../../tmp/test.txt\"},\n" +
//                "    {\"input\": \"/app/restricted/../../secret.txt\"}\n" +
//                "]\n" +
//                "```";

        try{
            ProcessBuilder pb = new ProcessBuilder("python", "penetration_test.py", payloads);

            Process p = pb.start();

            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            StringBuilder allLines = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                //System.out.println(line);
                allLines.append(line).append("\n");
            }
            result = allLines.toString();
            //System.out.println(result);

            int exitCode = p.waitFor();
            //System.out.println("\nExited code : " + exitCode);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    public Map<Integer, String> penetrateAll(MultipartFile file, String owner, String repo) throws Exception {
        int rowCount = dataService.getRowCount(file);
        Map<Integer, String> pageAnalysis = new HashMap<>();

        for (int i = 0; i < 3; i++) {
            try {
                // Process the current row
                Map<String, String> dataInRow = dataService.getDataInRow(file, i, owner, repo);
                //System.out.println(dataInRow.get("code"));
                String payloads_system_prompt = "You are a cybersecurity expert specialized in penetration testing.";
                String payloads_user_prompt = "Based on the following vulnerability details:\n" +
                        "\n" +
                        "%s\n" +
                        "Example Code:\n" +
                        "%s\n" +
                        "\n" +
                        "Generate exactly 5 test payloads as a JSON array. Each payload should be a single JSON object. Write me only a list of payloads!!!! Nothing else!!! List should in that format: ```json\n" +
                        "[\n" +
                        "    {\"input\": \"../../etc/passwd\"},\n" +
                        "    {\"input\": \"../../var/log/syslog\"},\n" +
                        "    {\"input\": \"../../../etc/hosts\"},\n" +
                        "    {\"input\": \"../../../../../../tmp/test.txt\"},\n" +
                        "    {\"input\": \"/app/restricted/../../secret.txt\"}\n" +
                        "]\n" +
                        "```";

                payloads_user_prompt = String.format(payloads_user_prompt, dataInRow.get("row"), dataInRow.get("code"));

                String response = openAiService.generateCompletion("gpt-4o-mini", payloads_system_prompt, payloads_user_prompt);

                JSONObject jsonObject = new JSONObject(response);

                // Navigate to the content field
                String payloads = jsonObject.getJSONArray("choices")
                        .getJSONObject(0)
                        .getJSONObject("message")
                        .getString("content");

                // Print the content
                //System.out.println("Content: " + payloads + "\n\n");

                String analysis = penetrate(payloads);
                pageAnalysis.put((i+1), analysis);


            } catch (Exception e) {
                // Log the error and continue with the next row
                System.err.println("Error processing row " + i + ": " + e.getMessage());
            }
        }
        System.out.println(pageAnalysis);

        return pageAnalysis;
    }

    public Map<Integer, String> getLiveDemo(MultipartFile file, String owner, String repo) throws Exception {
        Map<Integer, String> pageAnalysis = penetrateAll(file, owner, repo);
        int vulnCount = pageAnalysis.size();
        Map<Integer, String> demos = new HashMap<>();
        for(int i = 0; i < vulnCount; i++){
            Map<String, String> dataInRow = dataService.getDataInRow(file, i, owner, repo);
            String code = dataInRow.get("code");

            String getDemoPrompt = "==\n" +
                    "    %s\n" +
                    "    %s\n" +
                    "==\n" +
                    "###YOU ARE A CYBERSECURITY EXPERT, GENERATE OUTPUT BASED ON THIS TEMPLATE USING PROVIDED DATA\n" +
                    "    Exploit Steps\n" +
                    "        Entry points: \n" +
                    "            should include target endpoint: for example: /orders (from routes/order.ts, line 71).\n" +
                    "            and vulnerability like: NoSQL Injection due to improper sanitization of the id parameter in the database query. \n" +
                    "        Steps:\n" +
                    "            1. how to simulate attack, for example Inject NoSQL payloads into the request body or parameters to manipulate database logic.\n" +
                    "            2. example of payloads used for attack simulation, 2 is enough\n" +
                    "            3. and what how are those payloads used then, for examplePayloads are sent as JSON in the body of the request to /orders.\n" +
                    "    Expected behavior, for example \n" +
                    "        The application executes the NoSQL query without validation, exposing sensitive data.\n" +
                    "    Location in the file(github repo)\n" +
                    "        Location, for example\n" +
                    "            File: routes/order.ts\n" +
                    "            Function: findOne()\n" +
                    "            Line: 71\n" +
                    "            Affected Endpoint: /api/orders/{id}\n" +
                    "    Summary: vulnerability is exploited how, using what and what it gains ";

            String getDemoUserPrompt = String.format(getDemoPrompt, pageAnalysis.get(i), code);
            String getDemoSystemPrompt = "You are a cybersecurity expert specialized in penetration testing.";

            String response = openAiService.generateCompletion("gpt-4o-mini", getDemoSystemPrompt, getDemoUserPrompt);

            JSONObject jsonObject = new JSONObject(response);

            // Navigate to the content field
            String demo = jsonObject.getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");

            demos.put((i+1), demo);
            System.out.println("\n\n\n\n\n" + (i+1) + "demo completed\n\n\n\n\n");
            //System.out.println(demo);
        }

        return demos;
    }

    public Map<String, Map<Integer, String>> getAllData(MultipartFile file, String owner, String repo) throws Exception {
        Map<Integer, String> demos = getLiveDemo(file, owner, repo);
        int vulnCunt = demos.size();
        Map<Integer, String> desc_and_rec_map = new HashMap<>();


        for(int i = 0; i < vulnCunt; i++) {
            Map<String, String> dataInRow =  dataService.getDataInRow(file, i, owner, repo);

            String data_system_prompt = "You are an IT cybersecurity expert specializing in penetration testing. Using the provided data, analyze and explain the vulnerability in detail, including its origins, consequences, and associated bad coding practices. Then, recommend robust coding practices and mitigation techniques to prevent such vulnerabilities in the future.";
            String data_user_prompt = "%s\n\n" +
                    "            \"Given the following data:\\n\" +\n" +
                    "            \"Code Part: The code snippet where the vulnerability occurs.\\n\" +\n" +
                    "            \"Row Part: Information about the vulnerability detected on a website.\\n\" +\n" +
                    "            \"Based on this data, write two sections: Description and Recommendations.\\n\" +\n" +
                    "            \"Description:\\n\" +\n" +
                    "            \"Overall Description: Provide a general explanation of the vulnerability. Include:\\n\" +\n" +
                    "            \"What this vulnerability is.(2 sentences)\\n\" +\n" +
                    "            \"How it works in general.(2 sentences)\\n\" +\n" +
                    "            \"Why it is dangerous. (2 sentences)\\n\" +\n" +
                    "            \"Origin and Consequences: Explain:\\n\" +\n" +
                    "            \"How the vulnerability originated in the given code.(3 sentences) (in text are code examples)\\n\" +\n" +
                    "            \"The impact and consequences of exploiting this vulnerability.(2 sentences)\\n\" +\n" +
                    "            \"Bad Practices: Identify:\\n\" +\n" +
                    "            \"Specific coding practices that lead to this vulnerability. (1 sentence)\\n\" +\n" +
                    "            \"Examples of what not to do in code. (2 sentences)\\n\" +\n" +
                    "            \"Recommendations :\\n\" +\n" +
                    "            \"Provide detailed guidance on how to:\\n\" +\n" +
                    "            \"How to prevent this type of vulnerability in the code. (5 sentences)\\n\" +\n" +
                    "            \"Replace the vulnerable code with safer alternatives. (write all important parts of code)\\n\" +\n" +
                    "            \"On the end find out what is the language of given code. Write this in that format: language: java.\\n\" +\n" +
                    "            \"All section: Description, Recommendations, language are divided with signs: \\\"##########\\\" (# 10-times above section: Description, Recommendations, language) and 1 empty line above\\n\" +\n" +
                    "            \"Also, make all text well structed: should be written all sections and subsections mentioned above.";

            data_user_prompt = String.format(data_user_prompt, dataInRow.toString());

            String desc_and_rec = openAiService.generateCompletion("gpt-4o-mini", data_system_prompt, data_user_prompt);
            JSONObject jsonObject = new JSONObject(desc_and_rec);

            // Navigate to the content field
            String desc_and_rec_data = jsonObject.getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");

            desc_and_rec_map.put((i+1), desc_and_rec_data);
            System.out.println(desc_and_rec_data);
        }

        Map<String, Map<Integer, String>> all_data = new HashMap<>();
        all_data.put("demos", demos);
        all_data.put("desc_and_rec", desc_and_rec_map);

        return all_data;
    }
}
