package io.project.spring.basics.exploits_test_system_backend.controllers;

import io.project.spring.basics.exploits_test_system_backend.services.DataService;
import io.project.spring.basics.exploits_test_system_backend.services.GitService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/test")
public class SystemController {
    @Autowired
    private DataService dataService;
    @Autowired
    private GitService gitService;

    @GetMapping("")
    public String getTest() {
        return "test";
    }

    @GetMapping("/get_string")
    public Map<String, String> getTestString() {
        Map<String, String> response = new HashMap<>();
        response.put("message", dataService.getTestString());
        return response;
    }

    @PostMapping("/upload-csv")
    public ResponseEntity<Map<String, Object>> uploadCsvFile(@RequestParam("file") MultipartFile file) {
        if (file.isEmpty() || !file.getOriginalFilename().endsWith(".csv")) {
            return ResponseEntity.badRequest().body(Map.of("message", "Please upload a valid CSV file."));
        }

        try {
            // Get the parsed data from the service
            DataService fileUploadService;
            List<Map<String, String>> csvData = dataService.processCsvFile(file);

            // Return the parsed data as JSON
            return ResponseEntity.ok(Map.of("data", csvData));
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("message", "An error occurred while processing the file."));
        }
    }

    @PostMapping("/extract-column")
    public Map<String, List<String>> extractColumnFromCSV(@RequestParam("file") MultipartFile file, @RequestParam("column") String column){
        Map<String, List<String>> response = new HashMap<>();
        try {
            List<String> columnData = dataService.extractColumnFromProcessedCsv(file, column);
            response.put(column, columnData);
        } catch (Exception e) {
            e.printStackTrace();
            response.put("error", List.of("An error occurred while extracting the column."));
        }
        return response;
    }

    @PostMapping("/extract-row")
    public Map<String, String> extractRowFromCSV(@RequestParam("file") MultipartFile file, @RequestParam("row") int row){
        Map<String, String> response = new HashMap<>();
        try {
            response = dataService.extractRowByNumber(file, row);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return response;
    }

    @GetMapping("/get_code_from_repo")
    public Map<String, String[]> getCodeFromRepo(@RequestParam("owner") String owner, @RequestParam("repo") String repo, @RequestParam("filePath") String filePath, @RequestParam("lineNum") int lineNum) {
        Map<String, String[]> response = new HashMap<>();
        try {
            String[] codeLines = GitService.fetchFileContent(owner, repo, filePath, lineNum);
            response.put("code", codeLines);
        } catch (Exception e) {
            e.printStackTrace();
            response.put("error", new String[]{"An error occurred while fetching the code."});
        }
        return response;
    }

    @PostMapping("/get_data_in_row")
    public ResponseEntity<Map<Map<String, Map<String, String>>, Map<String, String[]>>> getDataInRow(
            @RequestParam("file") MultipartFile file,
            @RequestParam("rowNumber") int rowNumber,
            @RequestParam("owner") String owner,
            @RequestParam("repo") String repo
    ) {
        try {
            // Call the service method to get data
            Map<Map<String, Map<String, String>>, Map<String, String[]>> result = dataService.getDataInRow(file, rowNumber, owner, repo);

            // Return the result as a response
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            // Handle exceptions gracefully
            Map<String, String> errorResponse = Map.of("error", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body((Map) errorResponse);
        }
    }
}
